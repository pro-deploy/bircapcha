import os
import sys
import time
import logging
import random
import sqlite3
import traceback
import threading
import telebot
from telebot import types
from datetime import datetime, timedelta
from logging.handlers import RotatingFileHandler
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    log_dir = '/app/logs'
    os.makedirs(log_dir, exist_ok=True)
    log_file = os.path.join(log_dir, 'bot.log')

    formatter = logging.Formatter(
        '%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )

    file_handler = RotatingFileHandler(
        log_file, 
        maxBytes=10*1024*1024,  
        backupCount=5
    )
    file_handler.setFormatter(formatter)

    console_handler = logging.StreamHandler(sys.stdout)
    console_handler.setFormatter(formatter)

    logging.basicConfig(
        level=logging.DEBUG,
        handlers=[file_handler, console_handler]
    )

    telebot_logger = logging.getLogger('telebot')
    telebot_logger.setLevel(logging.WARNING)

class DatabaseManager:
    def __init__(self, db_path='/app/data/users_activity.db'):
        self.db_path = db_path
        self.ensure_database()

    def ensure_database(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        os.makedirs(os.path.dirname(self.db_path), exist_ok=True)
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS users (
                user_id INTEGER,
                chat_id INTEGER,
                username TEXT,
                join_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                captcha_passed INTEGER DEFAULT 0,
                message_count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, chat_id)
            )
        ''')

        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS activity_log (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user_id INTEGER,
                chat_id INTEGER,
                action TEXT,
                timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        ''')

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        conn.commit()
        conn.close()

        print(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞: {self.db_path}")

class UserActivityTracker:
    def __init__(self, db_path='/app/data/users_activity.db'):
        DatabaseManager(db_path)
        
        self.logger = logging.getLogger(self.__class__.__name__)
        self.conn = sqlite3.connect(db_path, check_same_thread=False)
        self.cursor = self.conn.cursor()
        self.logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞")

    def check_user_status(self, user_id, chat_id):
        try:
            self.cursor.execute('''
                SELECT captcha_passed, last_activity 
                FROM users 
                WHERE user_id = ? AND chat_id = ?
            ''', (user_id, chat_id))
            
            result = self.cursor.fetchone()
            
            if result is None:
                return 'new'
            
            captcha_passed, last_activity = result
            
            if captcha_passed == 0:
                return 'not_verified'
            
            return 'verified'
        
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            return 'error'

    def add_user(self, user_id, username, chat_id):
        try:
            self.cursor.execute('''
                INSERT OR REPLACE INTO users 
                (user_id, username, chat_id, join_date, last_activity, captcha_passed) 
                VALUES (?, ?, ?, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, 0)
            ''', (user_id, username, chat_id))
            
            self.cursor.execute('''
                INSERT INTO activity_log 
                (user_id, chat_id, action) 
                VALUES (?, ?, ?)
            ''', (user_id, chat_id, 'user_joined'))
            
            self.conn.commit()
            self.logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –¥–æ–±–∞–≤–ª–µ–Ω –≤ —á–∞—Ç {chat_id}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
            self.conn.rollback()

    def track_activity(self, user_id, chat_id):
        try:
            self.cursor.execute('''
                UPDATE users 
                SET 
                    last_activity = CURRENT_TIMESTAMP, 
                    message_count = message_count + 1 
                WHERE user_id = ? AND chat_id = ?
            ''', (user_id, chat_id))
            
            self.cursor.execute('''
                INSERT INTO activity_log 
                (user_id, chat_id, action) 
                VALUES (?, ?, ?)
            ''', (user_id, chat_id, 'message_sent'))
            
            self.conn.commit()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ —Ç—Ä–µ–∫–∏–Ω–≥–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ {user_id}: {e}")
            self.conn.rollback()

    def update_captcha_status(self, user_id, chat_id, status):
        try:
            self.cursor.execute('''
                UPDATE users 
                SET captcha_passed = ? 
                WHERE user_id = ? AND chat_id = ?
            ''', (1 if status == 'completed' else 0, user_id, chat_id))
            
            self.cursor.execute('''
                INSERT INTO activity_log 
                (user_id, chat_id, action) 
                VALUES (?, ?, ?)
            ''', (user_id, chat_id, f'captcha_{status}'))
            
            self.conn.commit()
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–ø—á–∏ {user_id}: {e}")
            self.conn.rollback()

class CaptchaBot:
    def __init__(self):
        setup_logging()
        self.logger = logging.getLogger(self.__class__.__name__)
        
        self.bot_token = os.getenv('BOT_TOKEN')
        if not self.bot_token:
            self.logger.critical("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
            sys.exit(1)
        
        self.captcha_config = {
            'objects': ['—Å—Ç–æ–ª', '—Å—Ç—É–ª', '–ª–æ–∂–∫–∞', '–≤–∏–ª–∫–∞', '–Ω–æ–∂', '—á–∞—à–∫–∞'],
            'emojis': {
                '—Å—Ç–æ–ª': ['ü™ë', 'üçΩÔ∏è', 'üè†', 'üßä', 'üö™'],
                '—Å—Ç—É–ª': ['ü™ë', 'üõãÔ∏è', 'üè†', 'üßä', 'üìö'],
                '–ª–æ–∂–∫–∞': ['ü•Ñ', 'üç≤', 'ü•£', 'üçΩÔ∏è', 'üçµ'],
                '–≤–∏–ª–∫–∞': ['üç¥', 'ü•ò', 'üçΩÔ∏è', 'ü•£', 'üç≤'],
                '–Ω–æ–∂': ['üî™', 'üçΩÔ∏è', 'ü•©', 'ü•í', 'ü•ï'],
                '—á–∞—à–∫–∞': ['‚òï', 'üçµ', 'ü•§', 'üç∫', 'ü•õ']
            },
            'difficulty_levels': {
                'easy': {'objects_count': 5, 'time_limit': 60},
                'medium': {'objects_count': 10, 'time_limit': 45},
                'hard': {'objects_count': 15, 'time_limit': 30}
            }
        }
        
        self.bot = telebot.TeleBot(self.bot_token)
        self.activity_tracker = UserActivityTracker()
        self.user_captcha = {}

        self.register_handlers()

    def register_handlers(self):
        @self.bot.message_handler(content_types=['new_chat_members'])
        def welcome(message):
            for new_member in message.new_chat_members:
                self.handle_new_member(message, new_member)

        @self.bot.message_handler(func=lambda message: True)
        def track_activity(message):
            self.activity_tracker.track_activity(
                message.from_user.id, 
                message.chat.id
            )

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('captcha_'))
        def captcha_callback(call):
            self.handle_captcha_response(call)

        @self.bot.message_handler(commands=['remove_captcha'])
        def remove_captcha(message):
            chat_member = self.bot.get_chat_member(message.chat.id, message.from_user.id)
            
            if chat_member.status in ['administrator', 'creator']:
                if message.reply_to_message:
                    user_id = message.reply_to_message.from_user.id
                    chat_id = message.chat.id
                elif len(message.text.split()) > 1:
                    try:
                        user_id = int(message.text.split()[1])
                        chat_id = message.chat.id
                    except ValueError:
                        self.bot.reply_to(message, "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                        return
                else:
                    self.bot.reply_to(message, "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–µ–ø–ª–∞–π –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ ID")
                    return

                self.activity_tracker.update_captcha_status(user_id, chat_id, 'completed')
                
                self.bot.reply_to(
                    message, 
                    f"–ö–∞–ø—á–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–Ω—è—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."
                )
            else:
                self.bot.reply_to(
                    message, 
                    "–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã"
                )

    def handle_new_member(self, message, new_member):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_status = self.activity_tracker.check_user_status(
            new_member.id, 
            message.chat.id
        )
        
        self.logger.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_member.id}: {user_status}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        self.activity_tracker.add_user(
            new_member.id, 
            new_member.username or str(new_member.id),
            message.chat.id
        )
        
        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–π—Å—Ç–≤–∏–µ
        if user_status in ['new', 'not_verified']:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–∞–ø—á—É
            captcha_data = self.generate_captcha()
            
            markup = types.InlineKeyboardMarkup(row_width=3)
            buttons = [
                types.InlineKeyboardButton(emoji, callback_data=f'captcha_{emoji}') 
                for emoji in captcha_data['emojis']
            ]
            markup.add(*buttons)

            captcha_message = self.bot.send_message(
                message.chat.id, 
                f"{new_member.first_name}, –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –≥—Ä—É–ø–ø—É –≤—ã–±–µ—Ä–∏—Ç–µ {captcha_data['object']}!",
                reply_markup=markup
            )

            self.user_captcha[new_member.id] = {
                'object': captcha_data['object'],
                'correct_emoji': captcha_data['correct_emoji'],
                'message_id': captcha_message.message_id,
                'chat_id': message.chat.id,
                'user_id': new_member.id,
                'timestamp': time.time()
            }
        
        elif user_status == 'verified':
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ verified, –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º
            self.bot.send_message(
                message.chat.id, 
                f"üëã {new_member.first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ!"
            )
        
        else:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏
            self.bot.send_message(
                message.chat.id, 
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_member.first_name}"
            )

    def generate_captcha(self):
        difficulty = os.getenv('DIFFICULTY_LEVEL', 'medium')
        objects = self.captcha_config['objects']
        
        target_object = random.choice(objects)
        object_emojis = self.captcha_config['emojis'].get(target_object, [])
        
        random.shuffle(object_emojis)
        
        return {
            'object': target_object,
            'emojis': object_emojis,
            'correct_emoji': object_emojis[0]
        }

    def handle_captcha_response(self, call):
        user_id = call.from_user.id
        chat_id = call.message.chat.id
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–∞–ø—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —ç—Ç–æ–º —á–∞—Ç–µ
        captcha_info = next(
            (info for info in self.user_captcha.values() 
             if info['user_id'] == user_id and info['chat_id'] == chat_id), 
            None
        )
        
        if not captcha_info:
            return
        
        selected_emoji = call.data.split('_')[1]
        
        if selected_emoji == captcha_info['correct_emoji']:
            self.bot.delete_message(
                captcha_info['chat_id'], 
                captcha_info['message_id']
            )
            
            self.activity_tracker.update_captcha_status(
                user_id, 
                chat_id, 
                'completed'
            )
            
            self.bot.send_message(
                captcha_info['chat_id'], 
                f"‚úÖ {call.from_user.first_name} –ø—Ä–æ—à–µ–ª –ø—Ä–æ–≤–µ—Ä–∫—É!"
            )
            
            # –£–¥–∞–ª—è–µ–º –∫–∞–ø—á—É –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            self.user_captcha = {
                k: v for k, v in self.user_captcha.items() 
                if v['user_id'] != user_id or v['chat_id'] != chat_id
            }
        else:
            self.bot.answer_callback_query(
                call.id, 
                f"–≠—Ç–æ –Ω–µ {captcha_info['object']}!"
            )

    def start(self):
        self.logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞")
        
        def check_captcha_timeout():
            while True:
                current_time = time.time()
                max_captcha_time = int(os.getenv('MAX_CAPTCHA_TIME', 300))
                
                for captcha_info in list(self.user_captcha.values()):
                    if current_time - captcha_info['timestamp'] > max_captcha_time:
                        try:
                            self.bot.delete_message(
                                captcha_info['chat_id'], 
                                captcha_info['message_id']
                            )
                            self.bot.kick_chat_member(
                                captcha_info['chat_id'], 
                                captcha_info['user_id']
                            )
                            
                            # –£–¥–∞–ª—è–µ–º –∫–∞–ø—á—É
                            self.user_captcha = {
                                k: v for k, v in self.user_captcha.items() 
                                if v['user_id'] != captcha_info['user_id'] 
                                or v['chat_id'] != captcha_info['chat_id']
                            }
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–ø—á–∏: {e}")
                
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

        timeout_thread = threading.Thread(target=check_captcha_timeout, daemon=True)
        timeout_thread.start()

        while True:
            try:
                self.bot.polling(none_stop=True)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ polling: {e}")
                time.sleep(15)

def main():
    bot = CaptchaBot()
    bot.start()

if __name__ == '__main__':
    main()